// Import the natural NLP library
const natural = require('natural');

// Import the compromise NLP library
const nlp = require('compromise');

// Phishing keywords list (used with the Natural library)
const phishingKeywords = [
    "urgent", "verify", "click", "here", "update", "your", "account", "password", "reset"
];

// Initialize the tokenizer from the Natural library
const tokenizer = new natural.WordTokenizer();

/**
 * Function to extract entities (URLs and email addresses) using the Compromise library.
 * @param {string} emailBody - The content of the email to analyze.
 * @returns {Object} - Extracted URLs and email addresses.
 */
function extractEntities(emailBody) {
    const doc = nlp(emailBody);

    // Extract URLs
    const urls = doc.urls().out('array');

    // Extract email addresses
    const emails = doc.emails().out('array');

    return { urls, emails };
}

/**
 * Phishing detection function using both Natural and Compromise libraries.
 * @param {string} emailBody - The content of the email to analyze.
 * @returns {Object} - Analysis result including phishing score, matched keywords, URLs, and email addresses.
 */
function detectPhishing(emailBody) {
    // Tokenize the email body into individual words using Natural
    const tokens = tokenizer.tokenize(emailBody.toLowerCase());

    // Find keywords from the phishingKeywords list that match tokens in the email body
    const matchedKeywords = tokens.filter(token => phishingKeywords.includes(token));

    // Calculate phishing score based on the proportion of matched keywords in the email tokens
    const phishingScore = (matchedKeywords.length / tokens.length) * 100;

    // Use Compromise to extract entities (URLs and email addresses)
    const entities = extractEntities(emailBody);

    // Determine the email's classification based on the phishing score
    let result;
    if (phishingScore < 30) {
        result = "Phishing Detected"; // High-risk phishing email
    } else if (phishingScore < 50) {
        result = "Suspicious Email"; // Medium-risk suspicious email
    } else {
        result = "Safe Email"; // Low-risk email
    }

    // Debugging logs to review the algorithm's behavior
    console.log("Tokens:", tokens);
    console.log("Matched Keywords:", matchedKeywords);
    console.log("Phishing Score:", phishingScore);

    // Return the detailed analysis results
    return {
        score: phishingScore,              // Numeric phishing score
        matchedKeywords,                   // Array of detected phishing keywords
        urls: entities.urls,               // Extracted URLs
        emails: entities.emails,           // Extracted email addresses
        result                             // Classification result
    };
}

// Example email body to test the function
const emailBody = `
    Dear user,
    Urgent action is required! Please visit http://malicious-site.com to verify your account details.
    If you have questions, contact us at support@phishing.com.
`;

// Call the phishing detection function with the test email body
const phishingResult = detectPhishing(emailBody);

// Output the phishing detection results for debugging and review
console.log("Phishing Result:", phishingResult);
